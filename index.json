{"repository_name":"github.com/vladfaust/cake-bake.cr","body":"# Cake-Bake\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Build status](https://img.shields.io/travis/com/vladfaust/cake-bake/master.svg?style=flat-square)](https://travis-ci.com/vladfaust/cake-bake)\n[![API Docs](https://img.shields.io/badge/api_docs-online-brightgreen.svg?style=flat-square)](https://github.vladfaust.com/cake-bake)\n[![Releases](https://img.shields.io/github/release/vladfaust/cake-bake.svg?style=flat-square)](https://github.com/vladfaust/cake-bake/releases)\n[![Awesome](https://awesome.re/badge-flat2.svg)](https://github.com/veelenga/awesome-crystal)\n[![vladfaust.com](https://img.shields.io/badge/style-.com-lightgrey.svg?longCache=true&style=flat-square&label=vladfaust&colorB=0a83d8)](https://vladfaust.com)\n[![Patrons count](https://img.shields.io/badge/dynamic/json.svg?label=patrons&url=https://www.patreon.com/api/user/11296360&query=$.included[0].attributes.patron_count&style=flat-square&colorB=red&maxAge=86400)](https://www.patreon.com/vladfaust)\n[![Gitter chat](https://img.shields.io/badge/chat%20on-gitter-green.svg?colorB=ED1965&logo=gitter&style=flat-square)](https://gitter.im/vladfaust/Lobby)\n\nCake-Bake *[ka-ke-ba-ke]* allows to bake [Cakefile](https://github.com/axvm/cake) into native Crystal code.\n\n## Supporters\n\nThanks to all my patrons, I can continue working on beautiful Open Source Software! 🙏\n\n[Alexander Maslov](https://seendex.ru), [Lauri Jutila](https://github.com/ljuti)\n\n*You can become a patron too in exchange of prioritized support and other perks*\n\n[![Become Patron](https://vladfaust.com/img/patreon-small.svg)](https://www.patreon.com/vladfaust)\n\n## About\n\nWhy? Because sometimes [cake]((https://github.com/axvm/cake)) tasks are wanted to be run as binaries.\n\nFor example, to run from a Docker container with an already built application: `docker run my-crystal-app bin/cake db:migrate`.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ntargets:\n  cake:\n    main: src/run/cake.cr\n\ndependencies:\n  cake-bake:\n    github: vladfaust/cake-bake\n    version: ~> 0.2.1\n```\n\n## Usage\n\nGiven `./Cakefile`:\n\n```crystal\nrequire \"./src/some_file\" # These requires\n\ntask :foo\n  puts \"bar\"\nend\n```\n\n`./src/run/cake.cr`:\n\n```crystal\nrequire \"cake-bake\"\nCake.bake(\"../../Cakefile\") # Full path to Cakefile needed to properly resolve requires (see above)\n\n# The Cakefile code will be put here, yay\n```\n\nThen execute from `./`:\n\n```shell\n$ crystal src/run/cake -- foo\nbar\n\n$ crystal build src/run/cake\n$ ./cake foo\nbar\n\n$ shards build\n$ ./bin/cake foo\nbar\n```\n\n## Contributing\n\n1. Fork it ( https://github.com/vladfaust/cake-bake/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [@vladfaust](https://github.com/vladfaust) Vlad Faust - creator, maintainer\n","program":{"html_id":"github.com/vladfaust/cake-bake.cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/vladfaust/cake-bake.cr","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/vladfaust/cake-bake.cr/Cake","path":"Cake.html","kind":"module","full_name":"Cake","name":"Cake","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cake/bake.cr","line_number":2,"url":"https://github.com/vladfaust/cake-bake.cr/blob/725461b5ed827e8393c8c591b6953133f6174887/src/cake/bake.cr"}],"repository_name":"github.com/vladfaust/cake-bake.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Bake a Cakefile into native Crystal code","summary":"<p>Bake a Cakefile into native Crystal code</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"bake(cakefile_path=&quot;./Cakefile&quot;)-macro","html_id":"bake(cakefile_path=&amp;quot;./Cakefile&amp;quot;)-macro","name":"bake","doc":null,"summary":null,"abstract":false,"args":[{"name":"cakefile_path","doc":null,"default_value":"\"./Cakefile\"","external_name":"cakefile_path","restriction":""}],"args_string":"(cakefile_path = <span class=\"s\">&quot;./Cakefile&quot;</span>)","source_link":"https://github.com/vladfaust/cake-bake.cr/blob/725461b5ed827e8393c8c591b6953133f6174887/src/cake/bake.cr#L3","def":{"name":"bake","args":[{"name":"cakefile_path","doc":null,"default_value":"\"./Cakefile\"","external_name":"cakefile_path","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    COMPILED_TASKS = [] of String\n\n    private macro desc(description)\n      \n# You don't need descriptions in the compiled code?\n\n    \nend\n\n    private macro task(name, &block)\n      \n\\{% \nCOMPILED_TASKS.push(name) %}\n\n      def \n\\{\n{name.id}}\n        \n\\{\n{yield}}\n      \nend\n    \nend\n\n    private macro define_run\n      def run(task_name)\n        \n\\{% \nbegin %}\n          case task_name.gsub(\":\", \"\")\n          \n\\{% for\n name in COMPILED_TASKS %}\n            when \n\\{\n{name.id.stringify}}\n              \n\\{\n{name.id}}\n          \n\\{% end\n %}\n            \nelse\n              abort(\"Unknown task #{task_name}, exiting!\")\n          \nend\n        \n\\{% end\n %}\n      \nend\n    \nend\n\n    \n{% require_path = (cakefile_path.split(\"Cakefile\")).first %}\n\n\n    \n{{ ((`cat Cakefile`).stringify.gsub(/require \"\\.{1,2}\\//, \"require \\\"#{require_path.id}\")).id }}\n\n\n    define_run\n\n    task_to_run = ARGV[0]?\n    abort(\"No task is specified, exiting!\") unless task_to_run\n\n    run(task_to_run)\n  \n"}}],"types":[]}]}}